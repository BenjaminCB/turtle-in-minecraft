

function map f xs do
    ys = []
    for x in xs do
        ys = ys ++ [f x]
    end
    return ys
end

functino filter f xs do
    ys = []
    for x in xs do
        if f x do
            ys = ys ++ [x]
        end
    end
    return ys
end

// make foldr and foldl
function fold f base xs do
    acc = base
    for x in xs do
        acc = f x acc
    end
    return acc
end

length = fn xs -> fold (fn a b -> b + 1) 0 xs
sum = fn xs -> fold (fn a b -> a + b) 0 xs

// make take and drop
function take n xs do
    i = n
    ys = []

    for x in xs do
        if i > 0 do
            ys = ys ++ [x]
        end
    end

    return ys
end

reverse = fn xs -> fold (fn a b -> [a] ++ b) [] xs

